name: Flutter CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
    drive:
      strategy:
        matrix:
          device:
            - "iPhone 13 Pro Max Simulator"
  
      runs-on: macOS-latest
  
      steps:
        - name: "List all simulators"
          run: "xcrun xctrace list devices"
  
        # - name: "Check available simulators"
        #   run: |
        #     xcrun simctl list devices
  
        - name: "Start Simulator"
          run: |
            UDID=$(xcrun xctrace list devices | grep -Eo "iPhone 13 Pro Max Simulator \(16.2\) \(\w{8}-\w{4}-\w{4}-\w{4}-\w{12}\)" | awk '{print substr($NF, 2, length($NF)-2)}')

            if [ -z "$UDID" ]; then
              echo "No Simulator with this name found: iPhone 13 Pro Max Simulator (16.2)"
              exit 1
            fi

            echo "UDID: $UDID"

            # Check the existence of the simulator
            if ! xcrun simctl list | grep -q "$UDID"; then
              echo "Simulator with UDID $UDID not found."
              exit 1
            fi

            # Boot the simulator
            xcrun simctl boot "$UDID"
    
        - name: Checkout code
          uses: actions/checkout@v2
  
        - name: Set up Dart
          uses: dart-lang/setup-dart@v1.5.1
  
        - name: Cache Flutter and pub dependencies
          uses: actions/cache@v2
          with:
            path: |
              ~/.pub-cache
              ~/.pub
              ~/.fvm
            key: ${{ runner.os }}-flutter-pub-${{ hashFiles('**/*.yaml') }}
  
        - name: Install and use FVM
          run: |
            dart pub global activate fvm
            fvm install 3.13.3
            fvm use 3.13.3
        - name: Get VM Service Port
          id: get-port
          run: |
            FLUTTER_OUTPUT=$(fvm flutter run 2>&1)
            PORT_NUMBER=$(echo "$FLUTTER_OUTPUT" | grep -oE ":[0-9]+/" | tr -d ':/')
            if [ -z "$PORT_NUMBER" ]; then
              echo "Failed to find the VM service port in Flutter output."
              exit 1
            else
              echo "Found VM service port: $PORT_NUMBER"
              echo "PORT_NUMBER=$PORT_NUMBER" >> $GITHUB_ENV
            fi
          shell: bash

        - name: Set VM_SERVICE_URL
          run: export VM_SERVICE_URL=http://localhost:${{ env.PORT_NUMBER }}
        - name: Run Flutter tests
          run: fvm flutter test
        - name: "Run Flutter Driver tests "
          run: "flutter drive --target=test_driver/app.dart"
    # Deploy code to staging environment
    